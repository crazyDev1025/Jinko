import { jsx } from 'react/jsx-runtime';
import { forwardRef, useState, useRef, useImperativeHandle, useEffect } from 'react';

const SCRIPT_URL = "https://challenges.cloudflare.com/turnstile/v0/api.js";
const DEFAULT_SCRIPT_ID = "cf-turnstile-script";
const DEFAULT_ONLOAD_NAME = "onloadTurnstileCallback";
const DEFAULT_CONTAINER_ID = "cf-turnstile";
const isScriptInjected = (scriptId) => !!document.querySelector(`#${scriptId}`);
const injectTurnstileScript = ({
  render,
  onLoadCallbackName,
  onLoad,
  scriptOptions: { nonce = "", defer = true, async = true, id = "", appendTo } = {}
}) => {
  const scriptId = id || DEFAULT_SCRIPT_ID;
  if (isScriptInjected(scriptId)) {
    onLoad();
    return;
  }
  const js = document.createElement("script");
  js.id = scriptId;
  const params = {
    render: render === "explicit" ? render : "",
    onload: render === "explicit" ? onLoadCallbackName : ""
  };
  const searchParams = new URLSearchParams(params);
  js.src = `${SCRIPT_URL}?${searchParams}`;
  if (nonce) {
    js.nonce = nonce;
  }
  js.defer = !!defer;
  js.async = !!async;
  js.onload = onLoad;
  const elementToInjectScript = appendTo === "body" ? document.body : document.getElementsByTagName("head")[0];
  elementToInjectScript.appendChild(js);
};
const CONTAINER_STYLE_SET = {
  normal: {
    width: 300,
    height: 65
  },
  compact: {
    width: 130,
    height: 120
  },
  invisible: {
    width: 0,
    height: 0,
    overflow: "hidden"
  }
};
function getTurnstileSizeOpts(size) {
  let result;
  if (size !== "invisible") {
    result = size;
  }
  return result;
}

const Turnstile = forwardRef((props, ref) => {
  const { scriptOptions, options, siteKey, onSuccess, onExpire, onError, id, style, ...divProps } = props;
  const config = options ?? {};
  const widgetSize = config.size ?? "normal";
  const [widgetId, setWidgetId] = useState();
  const [containerStyle, setContainerStyle] = useState(
    config.execution === "execute" ? CONTAINER_STYLE_SET.invisible : CONTAINER_STYLE_SET[widgetSize]
  );
  const [scriptLoaded, setScriptLoaded] = useState(false);
  const containerRef = useRef(null);
  const firstRendered = useRef(false);
  const containerId = id ?? DEFAULT_CONTAINER_ID;
  const onLoadCallbackName = scriptOptions?.onLoadCallbackName || DEFAULT_ONLOAD_NAME;
  const scriptOptionsJson = JSON.stringify(scriptOptions);
  const configJson = JSON.stringify(config);
  const renderConfig = {
    sitekey: siteKey,
    action: config.action,
    cData: config.cData,
    callback: onSuccess,
    "error-callback": onError,
    "expired-callback": onExpire,
    theme: config.theme ?? "auto",
    language: config.language ?? "auto",
    tabindex: config.tabIndex,
    "response-field": config.responseField,
    "response-field-name": config.responseFieldName,
    size: getTurnstileSizeOpts(widgetSize),
    retry: config.retry ?? "auto",
    "retry-interval": config.retryInterval ?? 8e3,
    "refresh-expired": config.refreshExpired ?? "auto",
    execution: config.execution ?? "render",
    appearance: config.appearance ?? "always"
  };
  useImperativeHandle(
    ref,
    () => {
      if (typeof window === "undefined")
        return;
      const { turnstile } = window;
      return {
        getResponse() {
          if (!window.turnstile || !window.turnstile?.getResponse || !widgetId) {
            console.warn("Turnstile has not been loaded");
            return;
          }
          return turnstile.getResponse(widgetId);
        },
        reset() {
          if (!window.turnstile || !window.turnstile?.reset || !widgetId) {
            console.warn("Turnstile has not been loaded");
            return;
          }
          if (config.execution === "execute") {
            setContainerStyle(CONTAINER_STYLE_SET.invisible);
          }
          turnstile.reset(widgetId);
        },
        remove() {
          if (!window.turnstile || !window.turnstile?.remove || !widgetId) {
            console.warn("Turnstile has not been loaded");
            return;
          }
          setWidgetId("");
          setContainerStyle(CONTAINER_STYLE_SET.invisible);
          window.turnstile.remove(widgetId);
        },
        render() {
          if (!window.turnstile || !window.turnstile?.render) {
            console.warn("Turnstile has not been loaded");
            return;
          }
          if (!containerRef.current) {
            console.warn("The container has not been rendered yet");
            return;
          }
          if (widgetId) {
            console.warn("Widget already rendered");
            return widgetId;
          }
          const id2 = window.turnstile.render(containerRef.current, renderConfig);
          setWidgetId(id2);
          if (config.execution !== "execute") {
            setContainerStyle(CONTAINER_STYLE_SET[widgetSize]);
          }
          return id2;
        },
        execute() {
          if (config.execution !== "execute") {
            return;
          }
          if (!window.turnstile || !window.turnstile?.execute) {
            console.warn("Turnstile has not been loaded");
            return;
          }
          if (!containerRef.current) {
            console.warn("The container has not been rendered yet");
            return;
          }
          if (!widgetId) {
            console.warn("The widget needs to render before calling the `.execute()` method");
            return;
          }
          window.turnstile.execute(containerRef.current, renderConfig);
          setContainerStyle(CONTAINER_STYLE_SET[widgetSize]);
        }
      };
    },
    [scriptLoaded, typeof window, widgetId, config.execution, widgetSize]
  );
  const onLoadScript = () => {
    setScriptLoaded(true);
  };
  const onLoadScriptError = () => {
    console.error("Error loading turnstile script");
  };
  useEffect(() => {
    if (!siteKey) {
      console.warn("sitekey was not provided");
      return;
    }
    window[onLoadCallbackName] = () => {
      if (!firstRendered.current) {
        const id2 = window.turnstile?.render(containerRef.current, renderConfig);
        setWidgetId(id2);
        firstRendered.current = true;
      }
    };
    injectTurnstileScript({
      render: "explicit",
      onLoadCallbackName,
      scriptOptions,
      onLoad: onLoadScript,
      onError: onLoadScriptError
    });
  }, [
    configJson,
    scriptOptionsJson,
    siteKey,
    renderConfig,
    onLoadCallbackName,
    scriptOptions,
    onLoadScript,
    onLoadScriptError
  ]);
  useEffect(
    function rerenderWidget() {
      if (containerRef.current && window.turnstile) {
        window.turnstile.remove(widgetId);
        const newWidgetId = window.turnstile.render(containerRef.current, renderConfig);
        setWidgetId(newWidgetId);
        firstRendered.current = true;
      }
    },
    [configJson, siteKey]
  );
  useEffect(() => {
    setContainerStyle(
      config.execution === "execute" ? CONTAINER_STYLE_SET.invisible : CONTAINER_STYLE_SET[widgetSize]
    );
  }, [widgetSize, config.execution]);
  return /* @__PURE__ */ jsx(
    "div",
    {
      ref: containerRef,
      id: containerId,
      style: { ...containerStyle, ...style },
      ...divProps
    }
  );
});
Turnstile.displayName = "Turnstile";

export { Turnstile };
